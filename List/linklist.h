#ifndef LINKLIST_H 
#define LINKLIST_H

typedef enum Message{Success, Fail, Fatal, RangError, Uninitial, ImproperPositon} Message;

typedef int ElemType;

// 单链表节点定义 
typedef struct LinkListNode   
{ 
	ElemType				data; // 数据域 
	struct LinkListNode	* 	next; // 指针域 
}LinkListNode, *LinkList;

// 双链表节点定义 
typedef struct DoubleLinkListNode
{
	ElemType					data;  // 数据域 
	struct DoubleLinkListNode * prior; // 指向当前节点的下一个节点的指针 
 	struct DoubleLinkListNode * next;  // 指向当前节点的前一个节点的指针 
}DoubleLinkListNode, *DoubleLinkList;

/**************************************************************************** 
 *          初始化链表L                                                     * 
 ****************************************************************************/
void InitialLinkList(LinkList * L); 

/**************************************************************************** 
 *          从头部创建一个链表L                                             * 
 ****************************************************************************/
int CreateLinkListFromHead(LinkList L, ElemType e[], int len);

/**************************************************************************** 
 *          从尾部创建一个链表L                                             * 
 ****************************************************************************/
int CreateLinkListFromTail(LinkList L, ElemType e[], int len);

/**************************************************************************** 
 *          遍历链表L                                                       * 
 ****************************************************************************/
void TravelLinkList(LinkList L); 

/**************************************************************************** 
 *          返回链表L中某个位置(pos)的节点                                  * 
 ****************************************************************************/
LinkListNode * GetLinkListNode(LinkList L, int pos);

/**************************************************************************** 
 *          返回链表L中某个节点值为e的节点                                  * 
 ****************************************************************************/
LinkListNode * LocateLinkList(LinkList L, ElemType e);

/**************************************************************************** 
 *          返回链表L中的长度                                               * 
 ****************************************************************************/
int LinkListLength(LinkList L);

/**************************************************************************** 
 *          向链表L中某个位置(pos)插入值为e节点                             * 
 ****************************************************************************/
int InsertLinkList(LinkList L, int pos, ElemType e);

/**************************************************************************** 
 *          删除链表L中某个位置(pos)其值为e节点                             * 
 ****************************************************************************/
int DeleteLinkList(LinkList L, int pos, ElemType *e);

/**************************************************************************** 
 *          合并链表LA和链表LB,并返回合并后的链表                           * 
 ****************************************************************************/
LinkList MergeLinkList(LinkList LA, LinkList LB);

/**************************************************************************** 
 *          创建一个循环单链表                                              * 
 ****************************************************************************/
void CreateCircleLinkList(LinkList L, ElemType e[], int len);

/**************************************************************************** 
 *          创建双向链表                                                    * 
 ****************************************************************************/
void CreateDoubleLinkList(DoubleLinkList L, ElemType e[], int len);

/**************************************************************************** 
 *          向双向两表中某个位置插入值为e的节点                             * 
 ****************************************************************************/
int InsertDoublelinkList(DoubleLinkList L, int pos, ElemType e);

/**************************************************************************** 
 *          删除双向两表中某个位置的节点，该节点的值为e                     * 
 ****************************************************************************/
int DeleteDoubleLinkList(DoubleLinkList L, int pos, ElemType *e);
#endif // ! LINKLIST_H
